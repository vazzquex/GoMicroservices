{{template "base" .}}

{{define "content"}}
<div class="container">
    <div class="row">
        <div class="col">
            <h1 class="mt-5" style="font-family: 'Arial', sans-serif; font-size: 2.5rem; color: #333; text-align: center; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);">Test Microservices</h1>
            <hr style="border: none; border-top: 2px solid #ccc; margin: 2rem auto; max-width: 50%;">


<div class="container">
  <div class="row">
    <div class="col">
      <div class="d-flex flex-column">
        <a id="brokerBtn" class="btn btn-secondary mb-2" href="javascript:void(0);">Test Broker</a>
        <a id="brokerBtnPing" class="btn btn-secondary" href="javascript:void(0);">Ping</a>
      </div>
    </div>
    <div class="col">
      <div class="d-flex flex-column">
        <a id="authBrokenButton" class="btn btn-secondary mb-2" href="javascript:void(0);">Test Auth</a>
      </div>
    </div>
    <div class="col">
      <div class="d-flex flex-column">
        <a id="logBtn" class="btn btn-secondary mb-2" href="javascript:void(0);">Test Logger</a>
      </div>
    </div>
  </div>
</div>


            
            <div id="output" class="mt-5" style="border: 1px solid #ccc; padding: 2em; background-color: #f7f7f7;">
                <span class="text-muted" style="font-style: italic;">Output shows here...</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h4 class="mt-5" style="font-family: 'Arial', sans-serif; font-size: 1.8rem; color: #333;">Sent</h4>
            <div class="mt-1" style="border: 1px solid #ccc; padding: 2em; background-color: #f7f7f7;">
                <pre id="payload" style="color: #333;"><span class="text-muted" style="font-style: italic;">Nothing sent yet...</span></pre>
            </div>
        </div>
        <div class="col">
            <h4 class="mt-5" style="font-family: 'Arial', sans-serif; font-size: 1.8rem; color: #333;">Received</h4>
            <div class="mt-1" style="border: 1px solid #ccc; padding: 2em; background-color: #f7f7f7;">
                <pre id="received" style="color: #333;"><span class="text-muted" style="font-style: italic;">Nothing received yet...</span></pre>
            </div>
        </div>
    </div>
</div>
{{end}}

{{define "js"}}
<script>
    let brokerBtn = document.getElementById("brokerBtn");
    let brokerBtnPing = document.getElementById("brokerBtnPing");
    let authBrokenButton = document.getElementById("authBrokenButton");
    let logBtn = document.getElementById("logBtn");



    let output = document.getElementById("output");
    let sent = document.getElementById("payload");
    let received = document.getElementById("received");


    logBtn.addEventListener("click", function() {
        const payload = {
            action: "log",
            log: {
                name: "event",
                data: "Some kind of data",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json");

        const body = {
            method: "POST",
            body: JSON.stringify(payload),
            headers: headers,
        }


        fetch("http://localhost:8080/handle", body)
            .then((response) => {
                if (!response.ok && response.status !== 202) {
                    console.log(response)
                    return response.json();
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                sent.innerHTML = JSON.stringify(payload, undefined, 4);
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if(data.error) {
                    output.innerHTML += `
                    <br><strong>Error: </strong> ${data.message}
                    `;
                }else{
                    output.innerHTML += `<br><strong>Response from Authentication broker service</strong>: ${data.message}`;
                }
            })
            .catch((error) => {
                output.innerHTML += "<br><br>Error: " + error;
            });


    })

    brokerBtn.addEventListener("click", function(){ 
        const body = {
            method: 'POST',
        }

        fetch("http://localhost:8080", body)
            .then((response) => response.json())
            .then((data) => {
                sent.innerHTML = "Empty post request";
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if(data.error) {
                    console.log(data.message);
                }else{
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            })
        .catch((error) => {
            output.innerHTML += "<br><br>Error: " + error;
        })
        
    });

    brokerBtnPing.addEventListener("click", function(){


        fetch("http://localhost:8080/ping", {method: 'GET'})
            .then((response) => response.json())
            .then((data) => {
                sent.innerHTML = "Ping";
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if(data.error) {
                    console.log(data.message);
                }else{
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            })
        .catch((error) => {
            output.innerHTML += "<br><br>Error: " + error;
        });
    });

    authBrokenButton.addEventListener("click", function(){
        const payload = {
            action: "auth",
            auth: {
                email: "admin@example.com",
                password: "verysecret",
            }
        }

        const headers = new Headers();
        headers.append("Content-Type", "application/json")

        const body = {
            method: "POST",
            body: JSON.stringify(payload),
            headers: headers,
        }

        fetch("http://localhost:8080/handle", body)
            .then((response) => response.json())
            .then((data) => {
                sent.innerHTML = JSON.stringify(payload, undefined, 4);
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if(data.error) {
                    output.innerHTML += `
                    <br><string>Error: </strong> ${data.message}
                    `;

                    console.log(data.message);
                }else{
                    output.innerHTML += `<br><strong>Response from Authentication broker service</strong>: ${data.message}`;
                }
            })
        .catch((error) => {
            output.innerHTML += "<br><br>Error: " + error;
        });
    });

</script>

{{end}}
